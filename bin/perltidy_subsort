#!/usr/bin/perl

#  This file is part of PerlTidy::SubSort.
#
#  This software is copyright (c) 2015 by Andrew Speer <andrew.speer@isolutions.com.au>.
#
#  This is free software; you can redistribute it and/or modify it under
#  the same terms as the Perl 5 programming language system itself.
#
#  Full license text is available at:
#
#  <http://dev.perl.org/licenses/>
#


#  Compiler pragma
#
use strict qw(vars);
use warnings;


#  Use the base modules
#
use PerlTidy::SubSort qw(subsort);
use PerlTidy::SubSort::Util;


#  Other external modules
#
use Getopt::Long;
use Pod::Usage;
use FindBin qw($Script);


#  Version Info, must be all one line for MakeMaker, CPAN.
#
$::VERSION='0.009';


#  Run main
#
exit ${&main(\@ARGV) || die};

#===================================================================================================


sub main {


    #  Get argv array ref
    #
    my $argv_ar=shift();


    #  Default options
    #
    my %opt=();


    #  Get command line options
    #
    GetOptions(
        \%opt,
        'help|?',
        'man',
        'version'
    ) || pod2usage(2);
    pod2usage(-verbose => 99, -sections => 'Synopsis|Options', -exitval => 1) if $opt{'help'};
    pod2usage(-verbose => 2) if $opt{'man'};
    $opt{'version'} && do {
        print "$Script version: $::VERSION\n";
        exit 0
    };


    #  Run through files
    #
    foreach my $fn (@{$argv_ar}) {
        msg("file $fn processing");
        my $count_sr=subsort($fn) ||
            return err ("$Script: unable to subsort $fn");
        msg("file $fn sorted %s subroutines", ${$count_sr});
    }


    #  Done
    #
    return \0;

}

__END__

wdrender
1
wdrender
parse and render WebDyne pages
wdrender [OPTIONS] FILE


wdrender
1
wdrender
parse and render WebDyne pages
wdrender [OPTIONS] FILE


=head1 Options

-h, --help

Show brief help message.

--handler

Use a different WebDyne handler module. Currently the only other handler module available is WebDyne::Chain.


=head1 Description

The C<<< wdrender >>> command displays the HTML that would be generated from a psp page using the WebDyne perl module.

By default C<<< wdrender >>> will use the internal WebDyne handler when building the output, but can optionally use other WebDyne modules (such as WebDyne::Chain) by using the C<<< --handler >>> option..


=head1 Notes

The C<<< wdrender >>> command will attempt to build the HTML as faithfully as possible from the command line environment, but may not be able to exactly duplicate the HTML generated under a real Web Server. As an example if a psp page takes advantge of the Apache request handler when generating HTML, the C<<< wdrender >>> commend will not be able to duplicate that environment.


=head1 Examples

C<<< wdrender widget.psp >>>

Display the HTML that would be generated by WebDyne from the widget.psp file.

 wdrender --handler=WebDyne::Chain
     widget.psp

Display the HTML that would be generated by WebDyne from the widget.psp file, but this time using the WebDyne::Chain handler. In this case the example would fail, as WebDyne::Chain expects to get a list of modules it will chain the page throught. Normally it would get that from the Web Server configuration file, but the WebDyne::Chain module can take the list of modules from the environment also. So a better example would be:

 WebDyneChain=WebDyne::Session wdrender
     --handler=WebDyne::Chain widget.psp


=head1 Author

Written by Andrew Speer, 


=head1 Copying

Copyright Â© 2008-2010 Andrew Speer. Free use of this software is granted under the terms of the GNU General Public License (GPL)
